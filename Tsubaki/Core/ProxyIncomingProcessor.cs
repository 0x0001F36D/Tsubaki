
namespace Tsubaki.Layer.Core
{
    using System.Collections.Generic;
    using System.Collections;

    // Singleton class generated by snippet
    public sealed class ProxyIncomingProcessor         : IEnumerable<IIncomingProcessor>,       IIncomingProcessor<SaidEventArgs>,         IIncomingProcessor<OrderedEventArgs>
    {
        public static ProxyIncomingProcessor Instance
        {
            get
            {
                if (s_instance == null)
                    lock (s_locker)
                        if (s_instance == null)
                            s_instance = new ProxyIncomingProcessor();
                return s_instance;
            }
        }


        private static volatile ProxyIncomingProcessor s_instance;
        private static object s_locker = new object();

        private readonly IReadOnlyList<IIncomingProcessor> _processors;

        private ProxyIncomingProcessor()
        {
            this._processors = new IIncomingProcessor[2]
            {
                new CommandIncomingProcessor(Modules.Global),
                new UtteranceIncomingProcessor(Modules.Global)
            };
        }

        void IIncomingProcessor<OrderedEventArgs>.Process(object sender, OrderedEventArgs e)
            => this._processors[0].Process(sender, e);


        void IIncomingProcessor<SaidEventArgs>.Process(object sender, SaidEventArgs e)
            => this._processors[1].Process(sender, e);


        IEnumerator<IIncomingProcessor> IEnumerable<IIncomingProcessor>.GetEnumerator() => this._processors.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => this._processors.GetEnumerator();
    }



}
